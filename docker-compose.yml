version: '3.3'

services:
  nginx:
    image: nginx:latest
    deploy:
      replicas: 1
      labels:
      - traefik.enable=true
      - traefik.http.routers.nginx.entrypoints=web
      - traefik.http.routers.nginx.rule=Host:nginx.localhost
      - traefik.http.services.nginx.loadbalancer.server.port=80
    # ports:
    #   - 81:80
    networks:
    - mynetwork

  apache:
    image: httpd:latest
    deploy:
      replicas: 1
      labels:
      - traefik.enable=true
      - traefik.http.routers.apache.entrypoints=web
      - traefik.http.routers.apache.rule=Host:apache.localhost
      - traefik.http.services.apache.loadbalancer.server.port=80
    # ports:
    #   - 82:80
    networks:
    - mynetwork

  caddy:
    image: abiosoft/caddy:latest
    deploy:
      replicas: 1
      labels:
      - traefik.enable=true
      - traefik.http.routers.caddy.entrypoints=web
      - traefik.http.routers.caddy.rule=Host:caddy.localhost
      - traefik.http.services.caddy.loadbalancer.server.port=2015
      
    # ports:
    #   - 83:2015
    networks:
    - mynetwork

  # PART 1: Using Nginx as Reverse Proxy 
  # rproxy:  
  #   image: nginx:latest
  #   ports:
  #   - 80:80
  #   volumes:
  #   - ./nginx.conf:/etc/nginx/conf.d/default.conf
  #   networks:
  #   - mynetwork

  # PART 2: Using Traefik
  traefik:
    image: traefik:latest
    deploy:
      replicas: 1
      placement:
        constraints:
        - node.role == manager
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.yml:/etc/traefik/traefik.yml
      - ./traefik-file-provider.yml:/etc/traefik/traefik-file-provider.yml
      - ./access.log:/etc/traefik/accsess.log
    ports:
    - 80:80
    - 8080:8080
    networks:
    - mynetwork

networks:
  mynetwork: